#!/bin/bash

UPDATE_SELF=${UPDATE_SELF:-1}
UPDATE_URI="https://raw.githubusercontent.com/snip/OGN-receiver-RPI-image/master/dist/OGN-receiver-config-manager"
if [ "`grep Hardware /proc/cpuinfo | awk '{ print $3 }'`" == "BCM2711" ]
  then
    echo "RPi4/CM4 detected => Will use OGN ARM version"
    OGNBINARYURL="http://download.glidernet.org/arm/rtlsdr-ogn-bin-ARM-latest.tgz"
  else
    echo "Will use OGN GPU version"
    OGNBINARYURL="http://download.glidernet.org/rpi-gpu/rtlsdr-ogn-bin-RPI-GPU-latest.tgz"
fi
GEOIDSEPARURL="http://download.glidernet.org/common/WW15MGH.DAC"
WORK_PATH="/root"

### Init some variables to default values
defaultFreqCorr="60"
GSMCenterFreq="950"
GSMGain="25"
Altitude="0"
wifiCountry="FR"

function checkInternet() {
  URLTOCHECK=$1
  echo "Checking internet connection to $URLTOCHECK."
  while [ 0 ] # Loop forever until we have a working internet connection
  do
    /usr/bin/wget --spider --quiet $URLTOCHECK
    if [ "$?" -eq 0 ]
    then
      break
    fi
    sleep 1
    echo "."
  done
  echo "Connected."
}

function update_self() {
	echo " *** Performing self-update"
	_tempFileName="$0.tmp"

	if ! eval curl -Lfs --output "${_tempFileName}" "${UPDATE_URI}"; then
		echo " !!! Failed to download autoupdate!"
		echo " !!! Make sure you have ca-certificates installed and that the time is set correctly"
		return 1
	fi

	OCTAL_MODE=$(stat -c '%a' "$0")
	if ! chmod ${OCTAL_MODE} "${_tempFileName}" ; then
		echo " !!! Failed: Error while trying to set mode on ${_tempFileName}"
		return 1
	fi

	cat > "${WORK_PATH}/.updateScript.sh" << EOF
	if mv "${_tempFileName}" "$0"; then
		rm -- "\$0"
		exec env UPDATE_SELF=0 /bin/bash "$0"
	else
		echo " !!! Failed!"
	fi
EOF
	echo " *** Relaunching after update"
	exec /bin/bash "${WORK_PATH}/.updateScript.sh"
}

### Load config from /boot
# Need this hack to allow sourcing from a file in dos format
source /dev/stdin < <(dos2unix < /boot/OGN-receiver.conf)


if [[ ${UPDATE_SELF} -ne 0 ]]; then # We already run this before self upgrade, so skeeping
  ### Manage pi user
  echo "Manage pi user"
  if [ -z "$piUserPassword" ]
  then
    echo "No password specified for \"pi\" user => Disabling usage of password for user \"pi\" (ssh key authentication is still possible)."
    passwd -l pi
  else
    echo "Password specified for \"pi\" user => Changing its password."
    echo "pi:$piUserPassword" | chpasswd
  fi

  ### Configure wifi
  if [ -n "$wifiPassword" ]
  then
    cat >> /etc/wpa_supplicant/wpa_supplicant.conf <<EOWIFI

country=${wifiCountry}
network={
    ssid="${wifiName}"
    psk="${wifiPassword}"
}

EOWIFI
    ( # Not blocking
      while [ 0 ] # Loop forever until we have a correct reply from wpa_cli
      do
        wpa_cli -i wlan0 reconfigure
        if [ "$?" -eq 0 ]
        then
          break
	else
	  sleep 10 # Required to have interface up)
	fi
      done
      sleep 10 # If we run to early rfkill it will not work
      /usr/sbin/rfkill unblock wifi
    ) & # End of Not blocking
      
  fi
  
  ### Self upgrade
  checkInternet "$UPDATE_URI"
  update_self
  # Should never be reach as exec is used except if it failed
fi

### Doing stuff which require internet connectivity ####################################

### Launch remote admin
/root/glidernet-autossh

### Upgrade rtlsdr-ogn binaries
checkInternet "$OGNBINARYURL"
echo "Downloading and installing $OGNBINARYURL"
cd /home/pi
/usr/bin/wget $OGNBINARYURL --quiet -O - | tar xzvf -
cd rtlsdr-ogn
chown root gsm_scan
chmod a+s  gsm_scan
chown root ogn-rf
chmod a+s  ogn-rf

### Awful hack to fix missing libjpeg in recent repo
if [ ! -f /usr/lib/arm-linux-gnueabihf/libjpeg.so.8 ]
  then
    echo "Retriving missing libjpeg.so.8"
    /usr/bin/wget http://download.glidernet.org/utils/arm/libjpeg.so.8 --quiet -O /usr/lib/arm-linux-gnueabihf/libjpeg.so.8
fi

### Manage GeoidSepar file
if [ ! -f /boot/WW15MGH.DAC ] || [ ! -s /boot/WW15MGH.DAC ]
then
  echo "GeoidSepar file need to be retrived from $GEOIDSEPARURL to /boot."
  /usr/bin/wget $GEOIDSEPARURL --quiet -O /boot/WW15MGH.DAC
fi
echo "Copy GeoidSepar file from /boot to rtlsdr-ogn working dir."
cp /boot/WW15MGH.DAC .

### Manage bias tee
if [ -n "$enableBias" ]
then
  if [ ! -f /boot/rtl_biast ]
  then
    echo "Retriving bias tee binaries"
    /usr/bin/wget http://download.glidernet.org/utils/arm/rtl_biast.tar.gz --quiet -O - | tar xzvf - --directory /boot/
  fi
  if [ "$enableBias" == "1" ]
  then
    echo "Enabling bias tee"
    export LD_LIBRARY_PATH=/boot/:$LD_LIBRARY_PATH
    /boot/rtl_biast -b 1
  else
    echo "Disabling bias tee"
    export LD_LIBRARY_PATH=/boot/:$LD_LIBRARY_PATH
    /boot/rtl_biast -b 0
  fi
fi

### Run a specific command
if [ -n "$runAtBoot" ]
then
  $runAtBoot
fi

### Try to mesure PPM correction
if [ -n "$FreqCorr" ]
then
  echo "Using configured PPM correction: $FreqCorr"
else
  tmpFreqCorr=`/home/pi/rtlsdr-ogn/gsm_scan 2>/dev/null | grep "Receiver Xtal correction" | awk '{print $7}' | sed -r 's/^.([0-9]+)\..*/\1/'`
  if [ -n "$tmpFreqCorr" ]
  then
    FreqCorr=$tmpFreqCorr
    echo "Using detected PPM correction: $FreqCorr"
  else
    FreqCorr=$defaultFreqCorr
    echo "Using default PPM correction: $FreqCorr"
  fi
fi

### Generate OGN receiver config file
if [ -z "$ReceiverName" ]
then
  echo "No receiver name provided => Exiting"
  exit 1;
fi

echo "Managing configuration for receiver \"$ReceiverName\".";

if [ -f /boot/rtlsdr-ogn.conf ]
then
  echo "/boot/rtlsdr-ogn.conf exist => Using it for rtlsdr-ogn parameters (ignoring other reciver parameters)."
  cp /boot/rtlsdr-ogn.conf /home/pi/rtlsdr-ogn.conf
else
  if [ -z "$Latitude" ]
  then
    echo "No Latitude provided => Exiting"
    exit 1;
  fi

  if [ -z "$Longitude" ]
  then
    echo "No Longitude provided => Exiting"
    exit 1;
  fi
  
  echo "Generating /home/pi/rtlsdr-ogn.conf"

  cat >/home/pi/rtlsdr-ogn.conf <<EOCONFFILE
RF:
{ 
  FreqCorr = $FreqCorr;          # [ppm]      "big" R820T sticks have 40-80ppm correction factors, measure it with gsm_scan

  GSM:                     # for frequency calibration based on GSM signals
  { CenterFreq  = $GSMCenterFreq;   # [MHz] find the best GSM frequency with gsm_scan
    Gain        = $GSMGain;   # [dB]  RF input gain (beware that GSM signals are very strong !)
  } ;
} ;
Position:
{ Latitude   =   $Latitude; # [deg] Antenna coordinates
  Longitude  =   $Longitude; # [deg]
  Altitude   =        $Altitude; # [m]   Altitude above sea leavel
} ;

APRS:
{ Call = "$ReceiverName";     # APRS callsign (max. 9 characters)
} ;

EOCONFFILE

fi

